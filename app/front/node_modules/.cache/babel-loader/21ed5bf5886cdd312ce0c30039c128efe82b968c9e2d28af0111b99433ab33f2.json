{"ast":null,"code":"var _jsxFileName = \"/home/p/490/app/front/src/GlowingButton.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './GlowingButton.css'; // Ensure CSS is imported\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GlowingButton = () => {\n  _s();\n  const [buttonText, setButtonText] = useState('Click Me!');\n  const [isMoving, setIsMoving] = useState(false);\n  const [position, setPosition] = useState({\n    top: '50%',\n    left: '50%'\n  });\n\n  // Function to generate random position on the screen\n  const getRandomPosition = () => {\n    const screenWidth = window.innerWidth;\n    const screenHeight = window.innerHeight;\n\n    // Ensure the button stays within bounds\n    const randomX = Math.random() * (screenWidth - 150); // 150px is the button width\n    const randomY = Math.random() * (screenHeight - 100); // 100px is the button height\n\n    return {\n      top: randomY + 'px',\n      left: randomX + 'px'\n    };\n  };\n\n  // Function to move the button\n  const moveButton = () => {\n    // Prevent the button from being clicked during movement\n    if (isMoving) return;\n    setIsMoving(true);\n\n    // Get a new random position\n    const newPosition = getRandomPosition();\n\n    // Set the position and allow the transition to happen\n    setPosition(newPosition);\n\n    // Reset isMoving after the animation completes (2s is the transition time)\n    setTimeout(() => {\n      setIsMoving(false);\n    }, 2000); // 2000ms = 2 seconds\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"glowing-button\",\n    onClick: moveButton,\n    style: {\n      top: position.top,\n      left: position.left\n    },\n    disabled: isMoving // Disable the button while it's moving\n    ,\n    children: buttonText\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(GlowingButton, \"mnYKpY2n672iQPrBPRSX3DHHYns=\");\n_c = GlowingButton;\nexport default GlowingButton;\nvar _c;\n$RefreshReg$(_c, \"GlowingButton\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","GlowingButton","_s","buttonText","setButtonText","isMoving","setIsMoving","position","setPosition","top","left","getRandomPosition","screenWidth","window","innerWidth","screenHeight","innerHeight","randomX","Math","random","randomY","moveButton","newPosition","setTimeout","className","onClick","style","disabled","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/p/490/app/front/src/GlowingButton.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './GlowingButton.css';  // Ensure CSS is imported\n\nconst GlowingButton = () => {\n  const [buttonText, setButtonText] = useState('Click Me!');\n  const [isMoving, setIsMoving] = useState(false);\n  const [position, setPosition] = useState({ top: '50%', left: '50%' });\n\n  // Function to generate random position on the screen\n  const getRandomPosition = () => {\n    const screenWidth = window.innerWidth;\n    const screenHeight = window.innerHeight;\n    \n    // Ensure the button stays within bounds\n    const randomX = Math.random() * (screenWidth - 150); // 150px is the button width\n    const randomY = Math.random() * (screenHeight - 100); // 100px is the button height\n\n    return { top: randomY + 'px', left: randomX + 'px' };\n  };\n\n  // Function to move the button\n  const moveButton = () => {\n    // Prevent the button from being clicked during movement\n    if (isMoving) return;\n    \n    setIsMoving(true);\n\n    // Get a new random position\n    const newPosition = getRandomPosition();\n\n    // Set the position and allow the transition to happen\n    setPosition(newPosition);\n\n    // Reset isMoving after the animation completes (2s is the transition time)\n    setTimeout(() => {\n      setIsMoving(false);\n    }, 2000);  // 2000ms = 2 seconds\n  };\n\n  return (\n    <button \n      className=\"glowing-button\" \n      onClick={moveButton} \n      style={{ top: position.top, left: position.left }}\n      disabled={isMoving}  // Disable the button while it's moving\n    >\n      {buttonText}\n    </button>\n  );\n};\n\nexport default GlowingButton;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,qBAAqB,CAAC,CAAE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE/B,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGN,QAAQ,CAAC,WAAW,CAAC;EACzD,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC;IAAEW,GAAG,EAAE,KAAK;IAAEC,IAAI,EAAE;EAAM,CAAC,CAAC;;EAErE;EACA,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,MAAMC,WAAW,GAAGC,MAAM,CAACC,UAAU;IACrC,MAAMC,YAAY,GAAGF,MAAM,CAACG,WAAW;;IAEvC;IACA,MAAMC,OAAO,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,IAAIP,WAAW,GAAG,GAAG,CAAC,CAAC,CAAC;IACrD,MAAMQ,OAAO,GAAGF,IAAI,CAACC,MAAM,CAAC,CAAC,IAAIJ,YAAY,GAAG,GAAG,CAAC,CAAC,CAAC;;IAEtD,OAAO;MAAEN,GAAG,EAAEW,OAAO,GAAG,IAAI;MAAEV,IAAI,EAAEO,OAAO,GAAG;IAAK,CAAC;EACtD,CAAC;;EAED;EACA,MAAMI,UAAU,GAAGA,CAAA,KAAM;IACvB;IACA,IAAIhB,QAAQ,EAAE;IAEdC,WAAW,CAAC,IAAI,CAAC;;IAEjB;IACA,MAAMgB,WAAW,GAAGX,iBAAiB,CAAC,CAAC;;IAEvC;IACAH,WAAW,CAACc,WAAW,CAAC;;IAExB;IACAC,UAAU,CAAC,MAAM;MACfjB,WAAW,CAAC,KAAK,CAAC;IACpB,CAAC,EAAE,IAAI,CAAC,CAAC,CAAE;EACb,CAAC;EAED,oBACEN,OAAA;IACEwB,SAAS,EAAC,gBAAgB;IAC1BC,OAAO,EAAEJ,UAAW;IACpBK,KAAK,EAAE;MAAEjB,GAAG,EAAEF,QAAQ,CAACE,GAAG;MAAEC,IAAI,EAAEH,QAAQ,CAACG;IAAK,CAAE;IAClDiB,QAAQ,EAAEtB,QAAS,CAAE;IAAA;IAAAuB,QAAA,EAEpBzB;EAAU;IAAA0B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEb,CAAC;AAAC9B,EAAA,CA9CID,aAAa;AAAAgC,EAAA,GAAbhC,aAAa;AAgDnB,eAAeA,aAAa;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}