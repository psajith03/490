---
description: Directory Structure
globs: 
alwaysApply: false
---
# 📌 Project Structure Rules

## 🌍 General Structure
- The project is divided into `app/` (frontend & backend), `model/` (ML-related), and root-level configs.
- AI should respect file separation and **not mix concerns** between frontend, backend, and ML code.

---

## 🎨 Frontend (React)
**Path: `app/front/`**
- The frontend is built with **React (JavaScript)**.
- Component-based structure is inside `app/front/src/components/`.
- **State Management** should follow best practices (e.g., React Context, Redux).
- Firebase-related logic is in `app/front/src/firebase.js`.
- CSS styles should be in `app/front/src/styles/`.

### **Rules:**
✅ Use **functional components** only.  
✅ Ensure **modular design** with reusable UI components.  
✅ API calls should be **abstracted in `app/front/src/api/`** (if applicable).  
❌ Do not mix UI and business logic in the same file.  

---

## 🖥️ Backend (Node.js & Flask)
**Path: `app/back/` and `app/api/`**
- The backend consists of **Node.js (Express) for authentication & API handling** in `app/back/` and **Flask for ML/AI API** in `app/api/`.

### **Rules for `app/back/` (Node.js)**
✅ `controllers/` handles request logic.  
✅ `routes/` defines endpoints (e.g., `auth.js`, `exercise.js`).  
✅ `middlewares/` contains middleware functions (e.g., authentication).  
✅ `models/` stores MongoDB schemas (e.g., `User.js`).  
✅ Firebase auth is managed in `firebase.js`.  
❌ Do not modify `firebaseServiceAccount.json` directly.  
❌ Do not store sensitive credentials in code. Use `.env`.  

### **Rules for `app/api/` (Flask)**
✅ `api.py` handles API routing.  
✅ Machine learning files (`train.py`, `recommend.py`, etc.) should not be modified unless updating model logic.  
✅ `data/` contains datasets (e.g., `megaGymDataset.csv`).  
✅ Avoid modifying files in `__pycache__/`.  

---

## 🤖 Machine Learning Model
**Path: `model/`**
- This folder contains **preprocessing, training, and recommendation scripts**.
- AI should treat this as a separate module and **not generate frontend/backend code inside it**.

### **Rules:**
✅ `preprocess.py`, `train.py`, `recommend.py` are for ML pipeline.  
✅ `load.py` is for loading trained models.  
✅ `main.py` runs model inference.  
❌ Do not modify compiled `.pyc` files in `__pycache__/`.  
❌ Do not add non-ML-related logic in this folder.  

---

## 🔧 Configurations & Utilities
- **Environment variables should be stored in `.env`.**
- **Utility functions should be in `server/utils/`** (if applicable).
- **API keys & credentials should never be hardcoded.**
- **Version control should track all config files except `.env`, which should be ignored.**

---
